#!/usr/bin/env python
############################################################################
#    Copyright (C) 2007 by Corbin Simpson                                  #
#    MostAwesomeDude@gmail.com                                             #
#                                                                          #
#    This program is free software; you can redistribute it and/or modify  #
#    it under the terms of the GNU General Public License as published by  #
#    the Free Software Foundation; either version 2 of the License, or     #
#    (at your option) any later version.                                   #
#                                                                          #
#    This program is distributed in the hope that it will be useful,       #
#    but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
#    GNU General Public License for more details.                          #
#                                                                          #
#    You should have received a copy of the GNU General Public License     #
#    along with this program; if not, write to the                         #
#    Free Software Foundation, Inc.,                                       #
#    59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             #
############################################################################
# -*- coding: ANSI_X3.4-1968 -*-
# generated by wxGlade 0.4.1 on Fri May 25 18:42:07 2007

# System imports
import os
import Queue
import sys
import time
# This is just as essential as everything else!
import wx

# We need to make sure our global directory exists
storage = os.path.normpath(os.path.expanduser("~") + "/.oadb")
if not os.path.exists(storage):
    os.mkdir(storage)

coreversion = "Core:\n  GUI Version: 0.2a\n  Python version: " + sys.version.split()[0] + "\n  WX version: " + wx.__version__ + "\n"

try:
    import psyco
    psyco.full()
    psycover = [str(i) for i in psyco.version_info]
    coreversion = coreversion + "  Psyco version: " + '.'.join(psycover) + "\n"
except ImportError:
    coreversion = coreversion + "  Not using Psyco"

# Local imports
import config
import db
import udp
import hash

versionstring = coreversion + udp.version + hash.version + db.version

replace_hash = {
    'aname': 'a',
    'aid': 'A',
    'ename': 'e',
    'eid': 'E',
    'epno': 'n',
    'fid': 'F',
    'gshort': 'g',
    'gid': 'G'
}

replace_info = [
    "$a: ANAME. The name of the anime, either English or Japanese (change in settings.)",
    "$A: AID. The global ID of the anime in AniDB.",
    "$e: ENAME. The name of the episode, either English or Japanese (change in settings.)",
    "$E: EID. The global ID of the episode in AniDB.",
    "$n: EPNO. The episode's number in the anime.",
    "$F: FID. The global ID of the file in AniDB.",
    "$g: GSHORT. The shortened name of the release group.",
    "$G: GID. The global ID of the release group in AniDB."
]

sample_data = {
    'aname': 'Death Note',
    'rating': 897,
    'epno': 35,
    'tmprating': 884,
    'erating': 734,
    'evotes': 1232,
    'synonyms': '',
    'year': '2006-2007',
    'ekanji': u'\u6bba\u610f',
    'size': 183302144,
    'ratings': 12,
    'epcount': 37,
    'ashort': 'DN',
    'filename': 'Death Note - 35 - Murder Intent - [Kuro-Hana](3838c4e6).avi',
    'state': 1,
    'gid': 4012,
    'fid': 334560,
    'length': 23,
    'type': 'TV Series',
    'cats': 'Present,Alternative,Japan,Earth,Asia,Manga,Seinen,Plot Continuity,Rivalry,Thriller,Detective,Character Developement,Fantasy,Law and Order,Romance,Cops,Love Polygon',
    'ed2k': '1f7d17883edbd552da28a980306109c2',
    'spcount': 7,
    'ename': 'Murder Intent',
    'average': 871,
    'eps': 37,
    'tmpvotes': 2122,
    'eid': 73592,
    'aid': 4563,
    'other': '',
    'gshort': 'Kuro-Hana'
}

def replace_hashes(regexp, data):
    '''Replaces hash-filled expressions with data. This function
    shouldn't be fucked with lightly.'''
    # No surprises here, XD...
    regexp = unicode(regexp)
    tempdic = {}
    for k, v in data.iteritems():
        # God, wonder if there's an easier way?
        # Although, this IS pretty snazzy...
        if replace_hash.has_key(k):
            tempdic[replace_hash[k]] = v
    data = tempdic
    del tempdic
    for key in data:
        '''Yes, I know there are TWO different ways to perform
        simple var subs on strings in Python. I don't want to use
        either because this is so much simpler and faster.'''
        regexp = regexp.replace("$" + key, unicode(str(data[key])))
    return regexp

class oadb(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: oadb.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.notebook1 = wx.Notebook(self, -1, style=0)
        self.addfile = wx.Panel(self.notebook1, -1)
        self.localdb = wx.Panel(self.notebook1, -1)
        self.anime = wx.Panel(self.notebook1, -1)
        self.main = wx.Panel(self.notebook1, -1)
        
        # Menu Bar
        self.menubar = wx.MenuBar()
        self.SetMenuBar(self.menubar)
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(wx.ID_EXIT, "&Quit\tCtrl-Q", "", wx.ITEM_NORMAL)
        self.menubar.Append(wxglade_tmp_menu, "AniDB")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(wx.ID_PREFERENCES, "Settings", "", wx.ITEM_NORMAL)
        self.menubar.Append(wxglade_tmp_menu, "Settings")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(wx.ID_ABOUT, "About\tF1", "", wx.ITEM_NORMAL)
        self.menubar.Append(wxglade_tmp_menu, "Help")
        # Menu Bar end
        self.statusbar = self.CreateStatusBar(2, 0)
        self.intro = wx.StaticText(self.main, -1, "Welcome to OpenAniDB.\n\nTo get started, please login below.")
        self.label_user = wx.StaticText(self.main, -1, "Username:", style=wx.ALIGN_CENTRE)
        self.label_pass = wx.StaticText(self.main, -1, "Password:", style=wx.ALIGN_CENTRE)
        self.saveuserpass = wx.CheckBox(self.main, -1, "Save username/\npassword?")
        self.username_box = wx.TextCtrl(self.main, -1, "")
        self.password_box = wx.TextCtrl(self.main, -1, "", style=wx.TE_PASSWORD)
        self.autologin = wx.CheckBox(self.main, -1, "Autologin?")
        self.login = wx.Button(self.main, -1, "Login", style=wx.BU_EXACTFIT)
        self.logout = wx.Button(self.main, -1, "Logout", style=wx.BU_EXACTFIT)
        self.search_anime = wx.StaticText(self.anime, -1, "Search for anime by name or\nanime ID (aid).")
        self.aname = wx.StaticText(self.anime, -1, "Anime name:")
        self.aid = wx.StaticText(self.anime, -1, "Anime ID:")
        self.aname_box = wx.TextCtrl(self.anime, -1, "")
        self.aid_box = wx.TextCtrl(self.anime, -1, "")
        self.anime_search = wx.Button(self.anime, -1, "Search!")
        self.anime_results = wx.TextCtrl(self.anime, -1, "", style=wx.TE_MULTILINE|wx.TE_READONLY|wx.TE_RICH|wx.TE_AUTO_URL)
        self.tree = wx.TreeCtrl(self.localdb, -1, style=wx.TR_HAS_BUTTONS|wx.TR_NO_LINES|wx.TR_HIDE_ROOT|wx.TR_DEFAULT_STYLE|wx.SUNKEN_BORDER)
        self.tablechoose = wx.Choice(self.localdb, -1, choices=["Local AniDB (by ID)", "Local AniDB (by name)"])
        self.refresh = wx.Button(self.localdb, -1, "Load")
        self.browse = wx.Button(self.addfile, -1, "Browse...")
        self.filelist = wx.ListCtrl(self.addfile, -1, style=wx.LC_REPORT|wx.SUNKEN_BORDER)
        self.starthashing = wx.ToggleButton(self.addfile, -1, "Start Hashing Process")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_MENU, self.quit, id=wx.ID_EXIT)
        self.Bind(wx.EVT_MENU, self.show_settings, id=wx.ID_PREFERENCES)
        self.Bind(wx.EVT_MENU, self.about, id=wx.ID_ABOUT)
        self.Bind(wx.EVT_CHECKBOX, self.set_userpass, self.saveuserpass)
        self.Bind(wx.EVT_TEXT_ENTER, self.gui_login, self.username_box)
        self.Bind(wx.EVT_TEXT_ENTER, self.gui_login, self.password_box)
        self.Bind(wx.EVT_CHECKBOX, self.set_autologin, self.autologin)
        self.Bind(wx.EVT_BUTTON, self.gui_login, self.login)
        self.Bind(wx.EVT_BUTTON, self.gui_logout, self.logout)
        self.Bind(wx.EVT_TEXT_ENTER, self.gui_anime, self.aname_box)
        self.Bind(wx.EVT_TEXT_ENTER, self.gui_anime, self.aid_box)
        self.Bind(wx.EVT_BUTTON, self.gui_anime, self.anime_search)
        self.Bind(wx.EVT_BUTTON, self.gui_refresh, self.refresh)
        self.Bind(wx.EVT_BUTTON, self.gui_filebrowse, self.browse)
        self.Bind(wx.EVT_TOGGLEBUTTON, self.gui_hash, self.starthashing)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: oadb.__set_properties
        self.SetTitle("OpenAniDB")
        self.statusbar.SetStatusWidths([-1, 100])
        # statusbar fields
        statusbar_fields = ["OpenAniDB version 0.4 ", "Loading..."]
        for i in range(len(statusbar_fields)):
            self.statusbar.SetStatusText(statusbar_fields[i], i)
        self.logout.Enable(False)
        self.tablechoose.SetSelection(0)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: oadb.__do_layout
        sizer1 = wx.BoxSizer(wx.VERTICAL)
        sizer_6 = wx.BoxSizer(wx.VERTICAL)
        sizer_10 = wx.BoxSizer(wx.VERTICAL)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_2 = wx.GridSizer(2, 2, 0, 0)
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_1 = wx.GridSizer(2, 3, 0, 0)
        sizer_1.Add(self.intro, 0, wx.ADJUST_MINSIZE, 0)
        sizer_1.Add((20, 30), 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.label_user, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.label_pass, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.saveuserpass, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.username_box, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.password_box, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.autologin, 0, wx.ADJUST_MINSIZE, 0)
        sizer_1.Add(grid_sizer_1, 0, 0, 0)
        sizer_2.Add(self.login, 0, wx.ADJUST_MINSIZE, 0)
        sizer_2.Add(self.logout, 0, wx.ALIGN_RIGHT|wx.ADJUST_MINSIZE, 0)
        sizer_1.Add(sizer_2, 0, wx.EXPAND, 0)
        self.main.SetSizer(sizer_1)
        sizer_3.Add(self.search_anime, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_2.Add(self.aname, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_2.Add(self.aid, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_2.Add(self.aname_box, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_2.Add(self.aid_box, 0, wx.ADJUST_MINSIZE, 0)
        sizer_3.Add(grid_sizer_2, 0, wx.EXPAND, 0)
        sizer_4.Add(self.anime_search, 0, wx.ADJUST_MINSIZE, 0)
        sizer_4.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
        sizer_3.Add(sizer_4, 0, wx.EXPAND, 0)
        sizer_3.Add(self.anime_results, 1, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
        self.anime.SetSizer(sizer_3)
        sizer_10.Add(self.tree, 1, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
        sizer_5.Add(self.tablechoose, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ADJUST_MINSIZE, 0)
        sizer_5.Add(self.refresh, 0, wx.ADJUST_MINSIZE, 0)
        sizer_10.Add(sizer_5, 0, wx.SHAPED|wx.ADJUST_MINSIZE, 0)
        self.localdb.SetSizer(sizer_10)
        sizer_6.Add(self.browse, 0, wx.EXPAND|wx.ALIGN_CENTER_HORIZONTAL|wx.ADJUST_MINSIZE, 0)
        sizer_6.Add(self.filelist, 1, wx.EXPAND, 0)
        sizer_6.Add(self.starthashing, 0, wx.EXPAND|wx.ALIGN_CENTER_HORIZONTAL|wx.SHAPED|wx.ADJUST_MINSIZE, 0)
        self.addfile.SetSizer(sizer_6)
        self.notebook1.AddPage(self.main, "Main")
        self.notebook1.AddPage(self.anime, "Anime Search")
        self.notebook1.AddPage(self.localdb, "Local AniDB")
        self.notebook1.AddPage(self.addfile, "Add File")
        sizer1.Add(self.notebook1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer1)
        sizer1.Fit(self)
        self.Layout()
        # end wxGlade
        # Begin Corbin's custom stuff
        # Tree right-click
        self.Bind(wx.EVT_TREE_ITEM_RIGHT_CLICK, self.gui_tree_rc, self.tree)
        # Close window -> exit
        self.Bind(wx.EVT_CLOSE, self.quit, self)
        # This sets up all the global shit we might need
        self.udpthread = udp.internets
        self.udpthread.status = self.statusbar
        self.udpthread.errno = self.derror
        # Start "teh internets," lawl.
        self.udpthread.setDaemon(True)
        self.udpthread.start()
        # Initialize the tree, ignore the returned root
        self.tree.AddRoot("!root")
        # Initialize the list
        self.filelist.InsertColumn(0, "File name", wx.LIST_FORMAT_CENTER, 350)
        # Settings
        self.conf = config.config()
        # Icon stuffs
        # The "default," available everywhere
        icon = wx.Icon("zero.xpm", wx.BITMAP_TYPE_XPM)
        # Are we on Windows?
        try:
            import win32api
            # Yes. Try to grab the icon from the resource section, if we're compiled.
            exe = win32api.GetModuleFileName(win32api.GetModuleHandle(None))
            icon = wx.Icon(exe + ";0", wx.BITMAP_TYPE_ICO)
        except:
            # No.
            pass
        iconpath = os.path.normpath(os.path.expanduser("~") + "/.oadb/zero.xpm")
        if os.path.isfile(iconpath):
            # Custom overrides all!
            icon = wx.Icon(iconpath, wx.BITMAP_TYPE_XPM)
        self.SetIcon(icon)
        # Load persistent settings
        if type(self.conf.get("user.pass.check")) is bool:
            self.saveuserpass.SetValue(self.conf.get("user.pass.check"))
        if type(self.conf.get("autologin.check")) is bool:
            self.autologin.SetValue(self.conf.get("autologin.check"))
        if self.conf.get("user.pass.check"):
            self.username_box.SetValue(self.conf.get("user"))
            self.password_box.SetValue(self.conf.get("pass"))
            if self.conf.get("autologin.check"):
                wx.CallAfter(self.gui_login, None)

    def derror(self, message):
        '''As the name suggests, this pops up an error dialog.
        In my infinite wisdom, I also decree that this function
        shall print to the console as well.'''
        wx.MessageBox(message, "Error")
        print "Error:", message

    def quit(self, event): # wxGlade: oadb.<event_handler>
        print "Quitting..."
        # Cleanup is good.
        self.gui_logout(event)
        self.Destroy()
        sys.exit()

    def show_settings(self, event): # wxGlade: oadb.<event_handler>
        print "Showing settings dialog..."
        settingwindow = settings(self, conf=self.conf)
        settingwindow.ShowModal()
        settingwindow.Destroy()
        self.saveuserpass.SetValue(self.conf.get("user.pass.check"))
        self.autologin.SetValue(self.conf.get("autologin.check"))

    def about(self, event): # wxGlade: oadb.<event_handler>
        print "Showing 'About...' box..."
        global versionstring
        wx.MessageBox("OpenAniDB (OADB) is a simple interface\nto the Anime Database (AniDB), written\nin Python with an emphasis on readable\nsource code and programmer sanity.\n\nIt is eternally under development,\nand commentary is always welcome.\n\n" + versionstring + "\nProgrammer: Corbin Simpson <MostAwesomeDude@gmail.com>\n", "About OADB", wx.OK + wx.ICON_INFORMATION)

    def set_userpass(self, event): # wxGlade: oadb.<event_handler>
        if not self.saveuserpass.GetValue():
            self.autologin.SetValue(False)
        self.conf.set("user.pass.check", self.saveuserpass.GetValue())
        self.conf.save()

    def gui_login(self, event): # wxGlade: oadb.<event_handler>
        print "Logging in..."
        if udp.session != None:
            # Already logged in, dumbass.
            self.derror("Already logged in.")
            return
        if udp.ping():
            wx.BeginBusyCursor()
            user = self.username_box.GetValue()
            passwd = self.password_box.GetValue()
            loginstatus = udp.login(user, passwd)
            wx.EndBusyCursor()
            if loginstatus == False:
                self.derror("Incorrect username or password.")
            else:
                # We're in. If we're supposed to, save the user/pass.
                if self.conf.get("user.pass.check"):
                    self.conf.set("user", self.username_box.GetValue())
                    self.conf.set("pass", self.password_box.GetValue())
                self.login.Enable(False)
                self.logout.Enable(True)
                print "Changing encoding..."
                if not udp.encoding():
                    self.derror("Warning: Couldn't negotiate Unicode encoding;\nJapanese characters may not appear correctly.")
        else:
            self.derror("AniDB not responding. Try again in a minute.")

    def set_autologin(self, event): # wxGlade: oadb.<event_handler>
        if self.autologin.GetValue():
            self.saveuserpass.SetValue(True)
        self.conf.set("autologin.check", self.autologin.GetValue())
        self.conf.save()

    def gui_logout(self, event): # wxGlade: oadb.<event_handler>
        print "Logging out..."
        if udp.logout():
            # Okay, we're outa da Matrix...
            self.login.Enable(True)
            self.logout.Enable(False)
        else:
            # Shit?!?
            self.derror("Could not log out.")

    def gui_anime(self, event): # wxGlade: oadb.<event_handler>
        print "Starting anime search..."
        aname = self.aname_box.GetValue()
        try:
            aid = int(self.aid_box.GetValue())
        except ValueError:
            aid = 0
        self.anime_results.Clear()
        wx.BeginBusyCursor()
        results = db.findaid(aid, aname)
        wx.EndBusyCursor()
        if results != None:
            # Hit!
            # Formatting...
            for k,v in results.iteritems():
                results[k] = unicode(str(v))
            self.aname_box.Clear()
            self.aid_box.Clear()
            self.anime_results.AppendText("Name: " + results['aname'] + "\n")
            self.anime_results.AppendText("Kanji: " + results['akanji'] + "\n")
            self.anime_results.AppendText("Anime ID: " + results['aid'] + "\n")
            self.anime_results.AppendText("AniDB link: http://anidb.info/a" + results['aid'] + "\n")
            self.anime_results.AppendText("Year: " + results['year'] + " (" + results['type'] + ")\n")
            self.anime_results.AppendText("(Other languages: " + results['aother'] + ")\n")
            self.anime_results.AppendText("Episodes: " + results['eps'] + " (" + results['epcount'] + " normal, " + results['spcount'] + " special)\n")
            self.anime_results.AppendText("Rating: " + results['arating'] + " (" + results['avotes'] + " votes)\n")
            self.anime_results.AppendText("(Temporary rating: " + results['tmprating'] + " (" + results['tmpvotes'] + " votes))\n")
        else:
            self.anime_results.AppendText("No results, sorry.")
            self.derror("No results found.")

    def gui_refresh(self, event): # wxGlade: oadb.<event_handler>
        print "Refreshing database tree..."
        '''Lemme explain how this new loop works. We iterate internally
        through all eps for each anime, and then through all files for each
        ep, crossing off results from each array as they match.'''
        # This flag, if set, will recall this event at the end of execution.
        unclean = False
        choice = self.tablechoose.GetSelection()
        if choice == 0 or choice == 1:
            # Entire cache, sorted as desired
            animes = db.allanime(choice)
            eps = db.alleps(choice)
        files = db.allfiles()
        mylist = db.allmylist()
        # Clear the tree, and then repopulate
        wx.BeginBusyCursor()
        root = self.tree.GetRootItem()
        animebranches = []
        self.tree.DeleteChildren(root)
        # Display anime names in English if possible?
        englishanime = self.conf.get("english.anime")
        englisheps = self.conf.get("english.eps")
        animeregexp = self.conf.get("anime.format")
        epregexp = self.conf.get("eps.format")
        fileregexp = self.conf.get("file.format")
        for anime in animes:
            # Soo much casting...
            if animeregexp != '':
                branch = self.tree.AppendItem(root, replace_hashes(animeregexp, anime))
            else:
                branch = self.tree.AppendItem(root, anime['aname'] + " (" + str(anime['aid']) + ")")
            self.tree.SetItemPyData(branch, ("a", anime['aid']))
            animebranches.append(branch)
            # Yes, this is for() each episode in the anime.
            for i in range(1, int(anime['epcount'])):
                leaf = self.tree.AppendItem(branch, "Episode " + str(i))
                # "ue" is "unknown episode"
                self.tree.SetItemPyData(leaf, ("ue", (anime['aid'], i)))
                for ep in eps:
                    # Does aid match?
                    if ep['aid'] == anime['aid'] and ep['epno'] == i:
                        # Hit!
                        if epregexp is not '':
                            self.tree.SetItemText(leaf, replace_hashes(epregexp, ep))
                        else:
                            self.tree.SetItemText(leaf, ep['ename'])
                        self.tree.SetItemPyData(leaf, ("e", ep['eid']))
                        for file in files:
                            # First, does aid match?
                            if file['aid'] == anime['aid']:
                                # Second, does eid match?
                                if file['eid'] == ep['eid']:
                                    # Hit! But, we need to establish some things first...
                                    if fileregexp is not '':
                                        fileleaf = self.tree.AppendItem(leaf, replace_hashes(fileregexp, file))
                                    else:
                                        fileleaf = self.tree.AppendItem(leaf, "File " + str(file['fid']))
                                        self.tree.SetItemPyData(fileleaf, ("f", file['fid']))
                                        break
        # Restore control
        wx.EndBusyCursor()

    def gui_filebrowse(self, event): # wxGlade: oadb.<event_handler>
        print "Showing file chooser..."
        filechooser = wx.FileDialog(self, "Add File(s)", '', '', "All supported filetypes|*.avi;*.mkv;*.mp4|Audio-Video Interleave (*.avi)|*.avi|Matroska (*.mkv)|*.mkv|Quicktime MPEG-4 (*.mp4)|*.mp4", wx.OPEN | wx.FILE_MUST_EXIST | wx.MULTIPLE)
        if filechooser.ShowModal() == wx.ID_OK:
            for file in filechooser.GetPaths():
                self.filelist.InsertStringItem(self.filelist.GetItemCount(), file)
        filechooser.Destroy()

    def gui_hash(self, event): # wxGlade: oadb.<event_handler>
        print "Starting hashing..."
        if udp.session == None:
            # Huh. Sure you don't wanna login?
            x = wx.MessageBox("You are not logged in.\n\nDo you wish to proceed anyway?", "Not Logged In", wx.YES_NO)
            if x == wx.NO:
                return
        if self.starthashing.GetValue():
            '''There used to be some threading code here that passed
            references from here to hash.hashthread. FUCK THAT SHIT.
            GTK+, at least, doesn't like doing things like passing
            references between threads. Fortunately, the progress
            dialog is modal anyway.'''
            total = self.filelist.GetItemCount()
            # hashes = []
            progdialog = wx.ProgressDialog("Currently hashing...", "Currently hashing...", (total*25)+1, self)
            while self.filelist.GetItemCount() > 0:
                filename = self.filelist.GetItem(0, 0).GetText()
                x = (total - self.filelist.GetItemCount())*25
                progdialog.Update(x, os.path.split(filename)[1])
                # hashes.append(hash.ed2k(filename))
                hasher = hash.ed2k(filename)
                datum = None
                for i in hasher:
                    x = x + 1
                    progdialog.Update(x)
                    if i != 1:
                        # On the last iteration, returns the data!
                        datum = i
                        break
                fileinfo = db.findfid(h=datum)
                del hasher
                if self.conf.get("file.move.check") or self.conf.get("file.rename.check"):
                    # Move the file!
                    if os.access(filename, os.R_OK | os.W_OK):
                        # We're okay, so let's move it...
                        (head, tail) = os.path.split(filename)
                        if self.conf.get("file.move.check"):
                            head = os.path.normpath(replace_hashes(self.conf.get("file.move.dest"), fileinfo))
                            if not os.path.exists(head):
                                try:
                                    os.makedirs(head)
                                except OSError:
                                    self.derror("Could not create directory " + head + ": Permission denied!")
                                    progdialog.Destroy()
                                    self.starthashing.SetValue(False)
                                    return
                        if self.conf.get("file.rename.check"):
                            # Confusing line. New tail is regexp plus file extension.
                            tail = replace_hashes(self.conf.get("file.rename.dest"), fileinfo) + '.' + tail.split('.')[-1]
                        print "Head:",head
                        print "Tail:",tail
                        target = os.path.join(head, tail)
                        os.rename(filename, target)
                        (filename, target) = (target, None)
                    else:
                        self.derror("Could not move " + filename + ": Permission denied!")
                        progdialog.Destroy()
                        self.starthashing.SetValue(False)
                        return
                    if self.conf.get("mylist.check"):
                        # Add to mylist!
                        if not db.mylistadd(fileinfo["fid"], int(self.conf.get("mylist.viewed")), self.conf.get("mylist.state")):
                            wx.MessageBox("Couldn't add a file to the mylist. This ain't good.")
                self.filelist.DeleteItem(0)
            progdialog.Update(total*25+1)
            progdialog.Destroy()
            self.starthashing.SetValue(False)
            #for hash in hashes:
                #db.findfile(h=hash)
        print "Finished hashing!"

    def gui_tree_rc(self, event):
        popup = wx.Menu()
        treeitem = event.GetItem()
        treedata = self.tree.GetItemPyData(treeitem)
        if treedata[0] == "a":
            # Right-click on anime
            idd = wx.NewId()
            popup.Append(idd, "Remove anime " + str(treedata[1]))
            self.Bind(wx.EVT_MENU, lambda evt: db.rmaid(treedata[1]), id=idd)
            idd = wx.NewId()
            popup.Append(idd, "Refresh anime " + str(treedata[1]))
            self.Bind(wx.EVT_MENU, lambda evt: db.rmaid(treedata[1]) and db.findaid(treedata[1]), id=idd)
        elif treedata[0] == "ue":
            # Right-click on unidentified episode
            idd = wx.NewId()
            popup.Append(idd, "Lookup episode")
            self.Bind(wx.EVT_MENU, lambda evt: db.findeid(aid=treedata[1]), id=idd)
        elif treedata[0] == "e":
            # Right-click on known episode
            idd = wx.NewId()
            popup.Append(idd, "Remove episode " + str(treedata[1]))
            self.Bind(wx.EVT_MENU, lambda evt: db.rmeid(treedata[1]), id=idd)
            idd = wx.NewId()
            popup.Append(idd, "Refresh episode " + str(treedata[1]))
            self.Bind(wx.EVT_MENU, lambda evt: db.rmeid(treedata[1]) and db.findeid(treedata[1]), id=idd)
        elif treedata[0] == "f":
            # Right-click on file
            idd = wx.NewId()
            popup.Append(idd, "Remove file " + str(treedata[1]))
            self.Bind(wx.EVT_MENU, lambda evt: db.rmfid(treedata[1]), id=idd)
            idd = wx.NewId()
            popup.Append(idd, "Refresh file " + str(treedata[1]))
            self.Bind(wx.EVT_MENU, lambda evt: db.rmfid(treedata[1]) and db.findfid(treedata[1]), id=idd)
        idd = wx.NewId()
        popup.Append(idd, "Refresh")
        self.Bind(wx.EVT_MENU, self.gui_refresh, id=idd)
        self.PopupMenu(popup)
        event.Skip()

# end of class oadb


class settings(wx.Dialog):
    def __init__(self, *args, **kwds):
        self.conf = kwds["conf"]
        del kwds["conf"]
        # Don't forget to replace the replace_hashes!
        # begin wxGlade: settings.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.display_staticbox = wx.StaticBox(self, -1, "Display")
        self.network_staticbox = wx.StaticBox(self, -1, "Network")
        self.filehashing_staticbox = wx.StaticBox(self, -1, "File Hashing")
        self.mylist_staticbox = wx.StaticBox(self, -1, "Mylist")
        self.actions_staticbox = wx.StaticBox(self, -1, "Actions")
        self.languages_staticbox = wx.StaticBox(self, -1, "Languages")
        self.englishanime = wx.CheckBox(self, -1, "Prefer English titles\nfor anime")
        self.englisheps = wx.CheckBox(self, -1, "Prefer English titles\nfor episodes")
        self.animeformatlabel = wx.StaticText(self, -1, "Formatting string for anime:")
        self.animeformat = wx.TextCtrl(self, -1, "$a ($A)")
        self.animeformatpreview = wx.StaticText(self, -1, "<Preview>")
        self.episodeformatlabel = wx.StaticText(self, -1, "Formatting string for episodes:")
        self.episodeformat = wx.TextCtrl(self, -1, "$e (#$n)")
        self.episodeformatpreview = wx.StaticText(self, -1, "<Preview>")
        self.fileformatlabel = wx.StaticText(self, -1, "Formatting string for files:")
        self.fileformat = wx.TextCtrl(self, -1, "$g ($F)")
        self.fileformatpreview = wx.StaticText(self, -1, "<Preview>")
        self.userpasscheck = wx.CheckBox(self, -1, "Save username and password?")
        self.autologin = wx.CheckBox(self, -1, "Autologin?")
        self.usernamelabel = wx.StaticText(self, -1, "Username:")
        self.username = wx.TextCtrl(self, -1, "")
        self.passwordlabel = wx.StaticText(self, -1, "Password:")
        self.password = wx.TextCtrl(self, -1, "")
        self.filemovecheck = wx.CheckBox(self, -1, "Move files to the following folder:")
        self.filemove = wx.TextCtrl(self, -1, "")
        self.filemovepreview = wx.StaticText(self, -1, "<Preview>")
        self.filerenamecheck = wx.CheckBox(self, -1, "Rename files using the following pattern:")
        self.filerename = wx.TextCtrl(self, -1, "$a - $n - $e - [$g]")
        self.filerenamepreview = wx.StaticText(self, -1, "<Preview>")
        self.mylistcheck = wx.CheckBox(self, -1, "Add files to mylist")
        self.mylistviewed = wx.CheckBox(self, -1, "Set files as as viewed?")
        self.myliststate = wx.RadioBox(self, -1, "Mylist State", choices=["Unknown", "On Hard Drive", "On CD/DVD", "Deleted"], majorDimension=0, style=wx.RA_SPECIFY_ROWS)
        self.formattinghelpbutton = wx.Button(self, -1, "String Formatting Help")
        self.apply = wx.Button(self, wx.ID_APPLY, "")
        self.revert = wx.Button(self, -1, "Revert")
        self.ok = wx.Button(self, wx.ID_OK, "")
        self.cancel = wx.Button(self, wx.ID_CANCEL, "")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_CHECKBOX, self.fix_autologin, self.autologin)
        self.Bind(wx.EVT_BUTTON, self.formatting_help, self.formattinghelpbutton)
        self.Bind(wx.EVT_BUTTON, self.apply_settings, id=wx.ID_APPLY)
        self.Bind(wx.EVT_BUTTON, self.revert_settings, self.revert)
        self.Bind(wx.EVT_BUTTON, self.apply_settings, id=wx.ID_OK)
        # end wxGlade
        # begin Corbin's fun lambda mess
        self.animeformatpreview.SetLabel(replace_hashes(self.animeformat.GetValue(), sample_data))
        self.episodeformatpreview.SetLabel(replace_hashes(self.episodeformat.GetValue(), sample_data))
        self.fileformatpreview.SetLabel(replace_hashes(self.fileformat.GetValue(), sample_data))
        self.filemovepreview.SetLabel(replace_hashes(self.filemove.GetValue(), sample_data))
        self.filerenamepreview.SetLabel(replace_hashes(self.filerename.GetValue(), sample_data))
        # Do ya really wanna mess with these? No, didn't think so...
        self.Bind(wx.EVT_TEXT, lambda evt: self.animeformatpreview.SetLabel(replace_hashes(self.animeformat.GetValue(), sample_data)), self.animeformat)
        self.Bind(wx.EVT_TEXT, lambda evt: self.episodeformatpreview.SetLabel(replace_hashes(self.episodeformat.GetValue(), sample_data)), self.episodeformat)
        self.Bind(wx.EVT_TEXT, lambda evt: self.fileformatpreview.SetLabel(replace_hashes(self.fileformat.GetValue(), sample_data)), self.fileformat)
        self.Bind(wx.EVT_TEXT, lambda evt: self.filemovepreview.SetLabel(replace_hashes(self.filemove.GetValue(), sample_data)), self.filemove)
        self.Bind(wx.EVT_TEXT, lambda evt: self.filerenamepreview.SetLabel(replace_hashes(self.filerename.GetValue(), sample_data)), self.filerename)
        self.Bind(wx.EVT_CHECKBOX, lambda evt: self.filemove.Enable(self.filemovecheck.GetValue()), self.filemovecheck)
        self.Bind(wx.EVT_CHECKBOX, lambda evt: self.filerename.Enable(self.filerenamecheck.GetValue()), self.filerenamecheck)
        self.Bind(wx.EVT_CHECKBOX, lambda evt: self.password.Enable(self.userpasscheck.GetValue()) and self.username.Enable(self.userpasscheck.GetValue()) and self.autologin.SetValue(self.userpasscheck.GetValue()), self.userpasscheck)
        self.boxdic = {
            "english.anime": self.englishanime,
            "english.eps": self.englisheps,
            "anime.format": self.animeformat,
            "eps.format": self.episodeformat,
            "file.format": self.fileformat,
            "file.move.check": self.filemovecheck,
            "file.rename.check": self.filerenamecheck,
            "file.move.dest": self.filemove,
            "file.rename.dest": self.filerename,
            "mylist.check": self.mylistcheck,
            "mylist.viewed": self.mylistviewed,
            "mylist.state": self.myliststate,
            "user.pass.check": self.userpasscheck,
            "autologin.check": self.autologin,
            "user": self.username,
            "pass": self.password
        }
        # Initial fill
        self.revert_settings(None)
        self.filemove.Enable(self.filemovecheck.GetValue())
        self.filerename.Enable(self.filerenamecheck.GetValue())
        self.fix_autologin(None)

    def __set_properties(self):
        # begin wxGlade: settings.__set_properties
        self.SetTitle("Settings")
        self.englisheps.SetValue(1)
        self.filerenamecheck.SetValue(1)
        self.mylistviewed.SetValue(1)
        self.myliststate.SetSelection(1)
        self.ok.SetDefault()
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: settings.__do_layout
        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_11 = wx.BoxSizer(wx.VERTICAL)
        actions = wx.StaticBoxSizer(self.actions_staticbox, wx.VERTICAL)
        sizer_14 = wx.BoxSizer(wx.HORIZONTAL)
        mylist = wx.StaticBoxSizer(self.mylist_staticbox, wx.VERTICAL)
        filehashing = wx.StaticBoxSizer(self.filehashing_staticbox, wx.VERTICAL)
        sizer_8 = wx.BoxSizer(wx.VERTICAL)
        network = wx.StaticBoxSizer(self.network_staticbox, wx.VERTICAL)
        sizer_12 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_9 = wx.BoxSizer(wx.HORIZONTAL)
        display = wx.StaticBoxSizer(self.display_staticbox, wx.VERTICAL)
        languages = wx.StaticBoxSizer(self.languages_staticbox, wx.HORIZONTAL)
        languages.Add(self.englishanime, 0, wx.ADJUST_MINSIZE, 0)
        languages.Add(self.englisheps, 0, wx.ADJUST_MINSIZE, 0)
        sizer_8.Add(languages, 0, wx.EXPAND, 0)
        display.Add(self.animeformatlabel, 0, wx.ADJUST_MINSIZE, 0)
        display.Add(self.animeformat, 0, wx.EXPAND|wx.ALIGN_RIGHT|wx.ADJUST_MINSIZE, 0)
        display.Add(self.animeformatpreview, 0, wx.ADJUST_MINSIZE, 0)
        display.Add(self.episodeformatlabel, 0, wx.ADJUST_MINSIZE, 0)
        display.Add(self.episodeformat, 0, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
        display.Add(self.episodeformatpreview, 0, wx.ADJUST_MINSIZE, 0)
        display.Add(self.fileformatlabel, 0, wx.ADJUST_MINSIZE, 0)
        display.Add(self.fileformat, 0, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
        display.Add(self.fileformatpreview, 0, wx.ADJUST_MINSIZE, 0)
        sizer_8.Add(display, 0, wx.EXPAND, 0)
        sizer_9.Add(self.userpasscheck, 0, wx.ADJUST_MINSIZE, 0)
        sizer_9.Add(self.autologin, 0, wx.ADJUST_MINSIZE, 0)
        network.Add(sizer_9, 1, wx.EXPAND, 0)
        sizer_12.Add(self.usernamelabel, 0, wx.ADJUST_MINSIZE, 0)
        sizer_12.Add(self.username, 1, wx.ADJUST_MINSIZE, 0)
        sizer_12.Add(self.passwordlabel, 0, wx.ADJUST_MINSIZE, 0)
        sizer_12.Add(self.password, 1, wx.ADJUST_MINSIZE, 0)
        network.Add(sizer_12, 1, wx.EXPAND, 0)
        sizer_8.Add(network, 0, wx.EXPAND, 0)
        sizer_7.Add(sizer_8, 1, wx.EXPAND, 0)
        filehashing.Add(self.filemovecheck, 0, wx.ADJUST_MINSIZE, 0)
        filehashing.Add(self.filemove, 0, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
        filehashing.Add(self.filemovepreview, 0, wx.ADJUST_MINSIZE, 0)
        filehashing.Add(self.filerenamecheck, 0, wx.ADJUST_MINSIZE, 0)
        filehashing.Add(self.filerename, 0, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
        filehashing.Add(self.filerenamepreview, 0, wx.ADJUST_MINSIZE, 0)
        sizer_11.Add(filehashing, 0, wx.EXPAND, 0)
        mylist.Add(self.mylistcheck, 0, wx.ADJUST_MINSIZE, 0)
        mylist.Add(self.mylistviewed, 0, wx.ADJUST_MINSIZE, 0)
        mylist.Add(self.myliststate, 0, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
        sizer_11.Add(mylist, 0, wx.EXPAND, 0)
        actions.Add(self.formattinghelpbutton, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ADJUST_MINSIZE, 0)
        sizer_14.Add(self.apply, 0, wx.ADJUST_MINSIZE, 0)
        sizer_14.Add(self.revert, 0, wx.ADJUST_MINSIZE, 0)
        sizer_14.Add(self.ok, 0, wx.ADJUST_MINSIZE, 0)
        sizer_14.Add(self.cancel, 0, wx.ADJUST_MINSIZE, 0)
        actions.Add(sizer_14, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ADJUST_MINSIZE, 0)
        sizer_11.Add(actions, 0, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
        sizer_7.Add(sizer_11, 0, wx.EXPAND, 0)
        self.SetSizer(sizer_7)
        sizer_7.Fit(self)
        self.Layout()
        # end wxGlade

    def fix_autologin(self, event): # wxGlade: settings.<event_handler>
        # We have to fix autologin, since its control doesn't fit in one lambda...
        if self.autologin.GetValue():
            self.userpasscheck.SetValue(True)
            self.password.Enable(True)
            self.username.Enable(True)

    def formatting_help(self, event): # wxGlade: settings.<event_handler>
        print "Showing formatting help..."
        wx.MessageBox("\n".join(replace_info), "String Formatting Help", wx.OK + wx.ICON_INFORMATION)

    def apply_settings(self, event): # wxGlade: settings.<event_handler>
        print "Applying settings..."
        for label, box in self.boxdic.iteritems():
            if type(box) == wx.CheckBox:
                self.conf.set(label, box.IsChecked())
            elif type(box) == wx.TextCtrl:
                # Strip out forbidden characters
                for char in ['%']:
                    box.SetValue(box.GetValue().replace(char,''))
                self.conf.set(label, box.GetValue())
            elif type(box) == wx.RadioBox:
                self.conf.set(label, box.GetSelection())
        self.conf.save()
        # Must pass on the event so the box can close!
        event.Skip()

    def revert_settings(self, event): # wxGlade: settings.<event_handler>
        print "Reverting settings..."
        self.conf.reload()
        for label, box in self.boxdic.iteritems():
            setting = self.conf.get(label)
            if type(box) == wx.RadioBox:
                if setting != None:
                    box.SetSelection(int(self.conf.get(label)))
                else:
                    self.conf.set(label, box.GetSelection())
            else:
                if setting != None:
                    box.SetValue(self.conf.get(label))
                else:
                    self.conf.set(label, box.GetValue())
# end of class settings

class OADB(wx.App):
    def OnInit(self):
        wx.InitAllImageHandlers()
        frame1 = oadb(None, -1, "")
        self.SetTopWindow(frame1)
        frame1.Show()
        return 1

# end of class OADB

if __name__ == "__main__":
    openanidb = OADB(0)
    openanidb.MainLoop()
